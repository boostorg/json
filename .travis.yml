# Copyright 2016 Peter Dimov
# Copyright 2017 - 2019 James E. King III
# Copyright 2019 - 2020 Alexander Grund
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE_1_0.txt or copy at http://boost.org/LICENSE_1_0.txt)

#
# Generic Travis CI build script for boostorg repositories
# See: https://github.com/boostorg/boost-ci
#
# Instructions for customizing this script for your library:
#
# 1. Customize the compilers and language levels you want in the 'jobs'.
# 2. If you have more than include/, src/, test/, example/, examples/, or
#    tools/ directories, modify your Travis CI project and add the environment
#    variable DEPINST.  For example if your build uses code in "bench/" and
#    "fog/" directories, then set DEPINST to the following:
#        --include bench --include fog
# 3. If you want to enable Coverity Scan, you need to provide the environment
#    variables COVERITY_SCAN_TOKEN and COVERITY_SCAN_NOTIFICATION_EMAIL in
#    your github settings.
# 4. If you want to enable a big-endian build, you need to uncomment the
#    big-endian build job.
# 5. Enable pull request builds in your boostorg/<library> account.
#
# That's it - the scripts will do everything else for you.

language: cpp
os: linux
dist: xenial

branches:
  only:
    - master
    - develop
    - /bugfix\/.*/
    - /feature\/.*/
    - /fix\/.*/
    - /pr\/.*/

env:
  global:
    - B2_CI_VERSION=1
  # see: http://www.boost.org/build/doc/html/bbv2/overview/invocation.html#bbv2.overview.invocation.properties
  # - B2_ADDRESS_MODEL=64,32
  # - B2_LINK=shared,static
  # - B2_THREADING=threading=multi,single
    - B2_VARIANT=release
    - B2_FLAGS="warnings=extra warnings-as-errors=on"

install:
  - git clone https://github.com/boostorg/boost-ci.git boost-ci-cloned
  - cp -prf boost-ci-cloned/ci .
  - rm -rf boost-ci-cloned
  - source ci/travis/install.sh

script: $BOOST_ROOT/libs/$SELF/ci/travis/build.sh

# Default toolsets in Ubuntu
#
#       trusty xenial bionic
#        14.04  16.04  18.04
#       ------ ------ ------
# clang    3.4    3.8    6.0
#   gcc  4.8.2  5.3.1  7.3.0

anchors:
  libcpp: &libcpp { apt: { packages: [libc++-dev, libc++-helpers] } }
  # More reliable way to add this as "ubuntu-toolchain-r-test" may fail on travis whitelisting
  ubuntu-toolchain-r-test:
    - &ubuntu-toolchain-r-test
      sourceline: "ppa:ubuntu-toolchain-r/test"
  llvm-toolchain-xenial-9: &llvm-toolchain-xenial-9
    sourceline: 'deb https://apt.llvm.org/xenial/ llvm-toolchain-xenial-9 main'
    key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
  clang-33: &clang-33 { apt: { packages: [ "clang-3.3"]                                          } }
  clang-34: &clang-34 { apt: { packages: [ "clang-3.4"]                                          } }
  clang-35: &clang-35 { apt: { packages: [ "clang-3.5"], sources: [ *ubuntu-toolchain-r-test ]   } }
  clang-36: &clang-36 { apt: { packages: [ "clang-3.6"], sources: [ *ubuntu-toolchain-r-test ]   } }
  clang-37: &clang-37 { apt: { packages: [ "clang-3.7"], sources: [ *ubuntu-toolchain-r-test ]   } }
  clang-38: &clang-38 { apt: { packages: [ "clang-3.8"], sources: [ *ubuntu-toolchain-r-test ]   } }
  clang-39: &clang-39 { apt: { packages: [ "clang-3.9"], sources: [ *ubuntu-toolchain-r-test ]   } }
  clang-4:  &clang-4  { apt: { packages: [ "clang-4.0",
                                          "libstdc++-6-dev" ], sources: [ "llvm-toolchain-xenial-4.0",
                                                                          *ubuntu-toolchain-r-test   ] } }
  clang-5:  &clang-5  { apt: { packages: [ "clang-5.0",
                                          "libstdc++-7-dev" ], sources: [ "llvm-toolchain-xenial-5.0",
                                                                          *ubuntu-toolchain-r-test   ] } }
  clang-6:  &clang-6  { apt: { packages: [ "clang-6.0",
                                          "libc6-dbg",
                                          "libc++-dev",
                                          "libstdc++-8-dev" ], sources: [ "llvm-toolchain-xenial-6.0",
                                                                          *ubuntu-toolchain-r-test   ] } }
  clang-7:  &clang-7  { apt: { packages: [ "clang-7",
                                          "libc6-dbg",
                                          "libc++-dev",
                                          "libstdc++-8-dev" ], sources: [ "llvm-toolchain-xenial-7",
                                                                          *ubuntu-toolchain-r-test   ] } }
  clang-8:  &clang-8  { apt: { packages: [ "clang-8",
                                          "libc6-dbg",
                                          "libc++-dev",
                                          "libstdc++-8-dev" ], sources: [ "llvm-toolchain-xenial-8",
                                                                          *ubuntu-toolchain-r-test   ] } }
  clang-9:  &clang-9  { apt: { packages: [ "clang-9" ],        sources: [ *llvm-toolchain-xenial-9,
                                                                        *ubuntu-toolchain-r-test    ] } }

  gcc-44: &gcc-44 { apt: { packages: [ "g++-4.4" ], sources: [ *ubuntu-toolchain-r-test ] } }
  gcc-46: &gcc-46 { apt: { packages: [ "g++-4.6" ], sources: [ *ubuntu-toolchain-r-test ] } }
  gcc-47: &gcc-47 { apt: { packages: [ "g++-4.7" ], sources: [ *ubuntu-toolchain-r-test ] } }
  gcc-48: &gcc-48 { apt: { packages: [ "g++-4.8" ], sources: [ *ubuntu-toolchain-r-test ] } }
  gcc-49: &gcc-49 { apt: { packages: [ "g++-4.9" ], sources: [ *ubuntu-toolchain-r-test ] } }
  gcc-5:  &gcc-5  { apt: { packages: [ "g++-5"   ], sources: [ *ubuntu-toolchain-r-test ] } }
  gcc-6:  &gcc-6  { apt: { packages: [ "g++-6"   ], sources: [ *ubuntu-toolchain-r-test ] } }
  gcc-7:  &gcc-7  { apt: { packages: [ "g++-7"   ], sources: [ *ubuntu-toolchain-r-test ] } }
  gcc-8:  &gcc-8  { apt: { packages: [ "g++-8"   ], sources: [ *ubuntu-toolchain-r-test ] } }
  gcc-9:  &gcc-9  { apt: { packages: [ "g++-9"   ], sources: [ *ubuntu-toolchain-r-test ] } }

jobs:
  allow_failures:
    - env:
      - COPY="all the environment settings from your job"

  include:
    # Documentation build
    - os: linux
      dist: xenial
      env: COMMENT=docs
      addons:
        apt:
          packages:
            - docbook
            - docbook-xml
            - docbook-xsl
            - xsltproc
            - libsaxonhe-java
            - default-jre-headless
      install:
        - cd ..
        - mkdir tmp && cd tmp
        - git clone -b 'Release_1_8_15' --depth 1 https://github.com/doxygen/doxygen.git
        - cd doxygen
        - cmake -H. -Bbuild -DCMAKE_BUILD_TYPE=Release
        - cd build
        - sudo make install
        - cd ../..
        - wget -O saxonhe.zip https://sourceforge.net/projects/saxon/files/Saxon-HE/9.9/SaxonHE9-9-1-4J.zip/download
        - unzip saxonhe.zip
        - sudo rm /usr/share/java/Saxon-HE.jar
        - sudo cp saxon9he.jar /usr/share/java/Saxon-HE.jar
        - cd ..
        - BOOST_BRANCH=develop && [ "$TRAVIS_BRANCH" == "master" ] && BOOST_BRANCH=master || true
        - git clone -b $BOOST_BRANCH https://github.com/boostorg/boost.git boost-root
        - cd boost-root
        - export BOOST_ROOT=$(pwd)
        - git submodule update --init libs/context
        - git submodule update --init tools/boostbook
        - git submodule update --init tools/boostdep
        - git submodule update --init tools/docca
        - git submodule update --init tools/quickbook
        - rsync -av $TRAVIS_BUILD_DIR/ libs/json
        - python tools/boostdep/depinst/depinst.py ../tools/quickbook
        - ./bootstrap.sh
        - ./b2 headers
      script:
        - |-
          echo "using doxygen ; using boostbook ; using saxonhe ;" > tools/build/src/user-config.jam
        - ./b2 -j3 libs/json/doc//boostrelease
    # install
    - os: linux
      dist: bionic
      compiler: g++
      env: CMAKE_INSTALL_TEST=1
      install:
        - pip install --user cmake
      addons:
        apt:
          packages:
            - libboost-system-dev
            - libboost-container-dev
      script:
        - mkdir __build__ && cd __build__
        - cmake -DCMAKE_INSTALL_PREFIX=~/.local ..
        - cmake --build . --target install
        - cd ../test/cmake_install_test && mkdir __build__ && cd __build__
        - cmake -DCMAKE_INSTALL_PREFIX=~/.local ..
        - cmake --build .
        - cmake --build . --target check

    # cmake
    - compiler: g++-9
      env:
        - COMMENT=cmake
        - CXX=g++-9
      install:
        - pip install --user cmake
      addons: *gcc-9
      script:
        - mkdir __build
        - cd __build
        - cmake -DBOOST_JSON_STANDALONE=1 ..
        - cmake --build .
        - ctest -V .

    # coverage
    - env:
        - COMMENT=codecov.io
        - LCOV_BRANCH_COVERAGE=0
        - B2_CXXSTD=11
        - B2_TOOLSET=gcc-8
        - B2_DEFINES="BOOST_NO_STRESS_TEST=1"
      addons: *gcc-8
      script:
        - cd $BOOST_ROOT/libs/$SELF
        - ci/travis/codecov.sh

    - { env: [ "B2_TOOLSET=clang-8",     "B2_CXXSTD=17,2a"    ], addons: *clang-8   }

    - env:
        - COMMENT=valgrind
        - B2_TOOLSET=clang-6.0
        - B2_CXXSTD=11,14
        - B2_DEFINES="BOOST_NO_STRESS_TEST=1"
        - B2_VARIANT=debug
        - B2_TESTFLAGS=testing.launcher=valgrind
        - VALGRIND_OPTS=--error-exitcode=1
      addons: *clang-6
      script:
        - cd $BOOST_ROOT/libs/$SELF
        - ci/travis/valgrind.sh

    - env:
        - COMMENT=asan
        - B2_VARIANT=debug
        - B2_TOOLSET=gcc-8
        - B2_CXXSTD=11,14
        - B2_ASAN=1
        - B2_DEFINES="BOOST_NO_STRESS_TEST=1"
      addons: *gcc-8

    - env:
        - COMMENT=tsan
        - B2_VARIANT=debug
        - B2_TOOLSET=gcc-8
        - B2_CXXSTD=11,14
        - B2_TSAN=1
        - B2_DEFINES="BOOST_NO_STRESS_TEST=1"
      addons: *gcc-8

    - env:
        - COMMENT=ubsan
        - B2_VARIANT=debug
        - B2_TOOLSET=gcc-8
        - B2_CXXSTD=11,14
        - B2_UBSAN=1
        - B2_DEFINES="define=BOOST_NO_STRESS_TEST=1 define=BOOST_JSON_HEADER_ONLY=1"
        - B2_LINKFLAGS="-fuse-ld=gold"
      addons: *gcc-8

    # libstdc++
    - { dist: "trusty",  # xenial has libstdc++ from gcc 5.4.0 with newer ABI
        env: [ "B2_TOOLSET=gcc-4.8",     "B2_CXXSTD=11"    ], addons: *gcc-48    }
    - { dist: "trusty",  # xenial has libstdc++ from gcc 5.4.0 with newer ABI
        env: [ "B2_TOOLSET=gcc-4.9",     "B2_CXXSTD=11"    ], addons: *gcc-49    }
    - { env: [ "B2_TOOLSET=gcc-5",       "B2_CXXSTD=11"    ], addons: *gcc-5     }
    - { env: [ "B2_TOOLSET=gcc-6",       "B2_CXXSTD=11,14"    ], addons: *gcc-6     }
    - { env: [ "B2_TOOLSET=gcc-7",       "B2_CXXSTD=14,17"    ], addons: *gcc-7     }
    - { env: [ "B2_TOOLSET=gcc-8",       "B2_CXXSTD=17,2a"    ], addons: *gcc-8     }
    - { env: [ "B2_TOOLSET=gcc-9",       "B2_CXXSTD=17,2a"    ], addons: *gcc-9     }
    - { dist: "trusty",  # xenial has libstdc++ from gcc 5.4.0 with newer ABI
        env: [ "B2_TOOLSET=clang-3.8",   "B2_CXXSTD=11"    ], addons: *clang-38  }
    - { env: [ "B2_TOOLSET=clang-4.0",   "B2_CXXSTD=11,14"    ], addons: *clang-4   }
    - { env: [ "B2_TOOLSET=clang-5.0",   "B2_CXXSTD=11,14"    ], addons: *clang-5   }
    - { env: [ "B2_TOOLSET=clang-6.0",   "B2_CXXSTD=14,17"    ], addons: *clang-6   }
    - { env: [ "B2_TOOLSET=clang-7",     "B2_CXXSTD=17,2a"    ], addons: *clang-7   }
#   - { env: [ "B2_TOOLSET=clang-8",     "B2_CXXSTD=17,2a"    ], addons: *clang-8   }
    - { env: [ "B2_TOOLSET=clang-9",     "B2_CXXSTD=11,14,17,2a" ], addons: *clang-8   }

    # libc++
    - { env: [ "B2_TOOLSET=clang-6.0",   "B2_CXXSTD=11,14",
               "B2_STDLIB=libc++"                             ], addons: *clang-6   }
    - { os: "osx"  ,
        env: [ "B2_TOOLSET=clang",       "B2_CXXSTD=11,17" ]                     }

    # to enable Intel ICC define INTEL_ICC_SERIAL_NUMBER and the following (under development):
    # - { env: [ "B2_TOOLSET=intel-linux", "B2_CXXSTD=11,14,17" ], addons: *gcc-7,
    #     script: cd $BOOST_ROOT/libs/$SELF && ci/travis/intelicc.sh                               }

    # uncomment to enable a big-endian build job, just note that it is 5-10 times slower
    # than a regular build and travis has a 50 minute time limit per job
    # - os: linux
    #   env:
    #     - COMMENT=big-endian
    #     - B2_CXXSTD=11
    #     - B2_TOOLSET=gcc
    #     - B2_DEFINES="BOOST_NO_STRESS_TEST=1"
    #     - BDDE_OS=red
    #     - BDDE_ARCH=ppc64
    #   script:
    #     - cd $BOOST_ROOT/libs/$SELF
    #     - ci/travis/bdde.sh

    # - os: linux
    #   env:
    #     - COMMENT=cppcheck
    #   script:
    #     - cd $BOOST_ROOT/libs/$SELF
    #     - ci/travis/cppcheck.sh

    #################### Jobs to run on pushes to master, develop ###################

    # Coverity Scan
    - if: (env(COVERITY_SCAN_NOTIFICATION_EMAIL) IS present) AND (branch IN (develop, master)) AND (type IN (cron, push))
      env:
        - COMMENT="Coverity Scan"
        - B2_TOOLSET=clang
      script:
        - cd $BOOST_ROOT/libs/$SELF
        - ci/travis/coverity.sh

notifications:
  email:
    false
