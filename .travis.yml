# Copyright 2016 Peter Dimov
# Copyright 2017 - 2019 James E. King III
# Copyright 2019 - 2020 Alexander Grund
# Copyright 2020 Krystian Stasiowski
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE_1_0.txt or copy at http://boost.org/LICENSE_1_0.txt)

#
# Generic Travis CI build script for boostorg repositories
# See: https://github.com/boostorg/boost-ci
#
# Instructions for customizing this script for your library:
#
# 1. Customize the compilers and language levels you want in the 'jobs'.
# 2. If you have more than include/, src/, test/, example/, examples/, or
#    tools/ directories, modify your Travis CI project and add the environment
#    variable DEPINST.  For example if your build uses code in "bench/" and
#    "fog/" directories, then set DEPINST to the following:
#        --include bench --include fog
# 3. If you want to enable Coverity Scan, you need to provide the environment
#    variables COVERITY_SCAN_TOKEN and COVERITY_SCAN_NOTIFICATION_EMAIL in
#    your github settings.
# 4. If you want to enable a big-endian build, you need to uncomment the
#    big-endian build job.
# 5. Enable pull request builds in your boostorg/<library> account.
#
# That's it - the scripts will do everything else for you.

language: cpp
os: linux
dist: xenial

cache:
  directories:
    - $HOME/cache 

branches:
  only:
    - master
    - develop
    - /bugfix\/.*/
    - /feature\/.*/
    - /fix\/.*/
    - /pr\/.*/

env:
  global:
    - B2_CI_VERSION=1
  # see: http://www.boost.org/build/doc/html/bbv2/overview/invocation.html#bbv2.overview.invocation.properties
  # - B2_ADDRESS_MODEL=64,32
  # - B2_LINK=shared,static
  # - B2_THREADING=threading=multi,single
    - B2_VARIANT=release
    - B2_FLAGS="warnings=extra warnings-as-errors=on"

install:
  - git clone https://github.com/boostorg/boost-ci.git boost-ci-cloned --depth 1
  - cp -prf boost-ci-cloned/ci .
  - rm -rf boost-ci-cloned
  - source ci/travis/install.sh

script: $BOOST_ROOT/libs/$SELF/ci/travis/build.sh

# Default toolsets in Ubuntu
#
#       trusty xenial bionic
#        14.04  16.04  18.04
#       ------ ------ ------
# clang    3.4    3.8    6.0
#   gcc  4.8.2  5.3.1  7.3.0

anchors:
  libcpp: &libcpp { apt: { packages: [libc++-dev, libc++-helpers] } }
  # More reliable way to add this as "ubuntu-toolchain-r-test" may fail on travis whitelisting
  ubuntu-toolchain-r-test:
    - &ubuntu-toolchain-r-test
      sourceline: "ppa:ubuntu-toolchain-r/test"
  llvm-toolchain-xenial-9: &llvm-toolchain-xenial-9
    sourceline: 'deb https://apt.llvm.org/xenial/ llvm-toolchain-xenial-9 main'
    key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
  llvm-toolchain-xenial-10: &llvm-toolchain-xenial-10
    sourceline: 'deb https://apt.llvm.org/xenial/ llvm-toolchain-xenial-10 main'
    key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
  llvm-toolchain-xenial-11: &llvm-toolchain-xenial-11
    sourceline: 'deb https://apt.llvm.org/xenial/ llvm-toolchain-xenial-11 main'
    key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
  # Snapshot (i.e. trunk) build of clang
  llvm-toolchain-xenial: &llvm-toolchain-xenial
    sourceline: 'deb https://apt.llvm.org/xenial/ llvm-toolchain-xenial main'
    key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'

  clang-33: &clang-33 { apt: { packages: [ "clang-3.3"]                                          } }
  clang-34: &clang-34 { apt: { packages: [ "clang-3.4"]                                          } }
  clang-35: &clang-35 { apt: { packages: [ "clang-3.5"], sources: [ *ubuntu-toolchain-r-test ]   } }
  clang-36: &clang-36 { apt: { packages: [ "clang-3.6"], sources: [ *ubuntu-toolchain-r-test ]   } }
  clang-37: &clang-37 { apt: { packages: [ "clang-3.7"], sources: [ *ubuntu-toolchain-r-test ]   } }
  clang-38: &clang-38 { apt: { packages: [ "clang-3.8"], sources: [ *ubuntu-toolchain-r-test ]   } }
  clang-39: &clang-39 { apt: { packages: [ "clang-3.9"], sources: [ *ubuntu-toolchain-r-test ]   } }
  clang-4:  &clang-4  { apt: { packages: [ "clang-4.0",
                                          "libstdc++-6-dev" ], sources: [ "llvm-toolchain-xenial-4.0",
                                                                          *ubuntu-toolchain-r-test   ] } }
  clang-5:  &clang-5  { apt: { packages: [ "clang-5.0",
                                          "libstdc++-7-dev" ], sources: [ "llvm-toolchain-xenial-5.0",
                                                                          *ubuntu-toolchain-r-test   ] } }
  clang-6:  &clang-6  { apt: { packages: [ "clang-6.0",
                                          "libc6-dbg",
                                          "libstdc++-8-dev" ], sources: [ "llvm-toolchain-xenial-6.0",
                                                                          *ubuntu-toolchain-r-test   ] } }
  clang-7:  &clang-7  { apt: { packages: [ "clang-7",
                                          "libstdc++-8-dev" ], sources: [ "llvm-toolchain-xenial-7",
                                                                          *ubuntu-toolchain-r-test   ] } }
  clang-8:  &clang-8  { apt: { packages: [ "clang-8",
                                          "libstdc++-8-dev" ], sources: [ "llvm-toolchain-xenial-8",
                                                                          *ubuntu-toolchain-r-test   ] } }
  clang-9:  &clang-9  { apt: { packages: [ "clang-9",
                                          "libstdc++-9-dev" ], sources: [ *llvm-toolchain-xenial-9,
                                                                          *ubuntu-toolchain-r-test   ] } }

  clang-10:  &clang-10  { apt: { packages: [ "clang-10",
                                            "libstdc++-9-dev" ], sources: [ *llvm-toolchain-xenial-10,
                                                                            *ubuntu-toolchain-r-test   ] } }

  clang-11:  &clang-11  { apt: { packages: [ "clang-11",
                                            "libstdc++-9-dev" ], sources: [ *llvm-toolchain-xenial-11,
                                                                            *ubuntu-toolchain-r-test   ] } }

  clang-12: &clang-12  { apt: { packages: [ "clang-12",
                                           "libstdc++-9-dev" ], sources: [ *llvm-toolchain-xenial,
                                                                           *ubuntu-toolchain-r-test   ] } }

  gcc-44: &gcc-44 { apt: { packages: [ "g++-4.4" ], sources: [ *ubuntu-toolchain-r-test ] } }
  gcc-46: &gcc-46 { apt: { packages: [ "g++-4.6" ], sources: [ *ubuntu-toolchain-r-test ] } }
  gcc-47: &gcc-47 { apt: { packages: [ "g++-4.7" ], sources: [ *ubuntu-toolchain-r-test ] } }
  gcc-48: &gcc-48 { apt: { packages: [ "g++-4.8" ], sources: [ *ubuntu-toolchain-r-test ] } }
  gcc-49: &gcc-49 { apt: { packages: [ "g++-4.9" ], sources: [ *ubuntu-toolchain-r-test ] } }
  gcc-5:  &gcc-5  { apt: { packages: [ "g++-5"   ], sources: [ *ubuntu-toolchain-r-test ] } }
  gcc-6:  &gcc-6  { apt: { packages: [ "g++-6"   ], sources: [ *ubuntu-toolchain-r-test ] } }
  gcc-7:  &gcc-7  { apt: { packages: [ "g++-7"   ], sources: [ *ubuntu-toolchain-r-test ] } }
  gcc-8:  &gcc-8  { apt: { packages: [ "g++-8"   ], sources: [ *ubuntu-toolchain-r-test ] } }
  gcc-9:  &gcc-9  { apt: { packages: [ "g++-9"   ], sources: [ *ubuntu-toolchain-r-test ] } }
  gcc-10: &gcc-10 { apt: { packages: [ "g++-10"  ], sources: [ *ubuntu-toolchain-r-test ] } }

  boost: &boost
    install:
      - git clone https://github.com/boostorg/boost-ci.git boost-ci-cloned --depth 1 
      - cp -prf boost-ci-cloned/ci .
      - rm -rf boost-ci-cloned
      - source ci/travis/install.sh
    script: $BOOST_ROOT/libs/$SELF/ci/travis/build.sh

  standalone: &standalone
    install:
      - pip install --user cmake
    script:
      - export CXXFLAGS="-Wextra -Werror -std=c++17"
      - mkdir __build_17
      - cd __build_17
      - cmake -DBOOST_JSON_STANDALONE=1 ..
      - cmake --build .
      - ctest -V .
      - export CXXFLAGS="-Wextra -Werror -std=c++2a"
      - mkdir ../__build_2a
      - cd ../__build_2a
      - cmake -DBOOST_JSON_STANDALONE=1 ..
      - cmake --build .
      - ctest -V .

jobs:
  allow_failures:
    - env:
      - COPY="all the environment settings from your job"

  include:
    - { env: [ "B2_TOOLSET=clang-11",  "B2_CXXSTD=17,2a" ], addons: *clang-11, <<: *boost      }

notifications:
  email:
    false
