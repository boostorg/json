{% import "docca/quickbook/components.jinja2" as comps -%}

{% macro write_namespace(entity) -%}
    {%- for m in entity.members.values() | select("Type") | sort -%}
        {{ write_type(m) }}
    {%- endfor -%}

    {%- for m in entity.members.values() | select("OverloadSet") | sort -%}
        {{ write_overload_set(m) }}
    {%- endfor -%}

    {%- for m in entity.members.values() | select("Variable") | sort -%}
        {{ comps.write_variable(m) }}
    {%- endfor -%}
{%- endmacro %}

{% macro write_type(entity) %}
{% call(segment) comps.section(entity) %}

{%- if segment == "summary" -%}
{%- if entity is Scope -%}
{#- public members -#}
{{ comps.simple_summary_table(
    entity.members.values()
        | select("Type")
        | selectattr("access", "eq", Access.public),
    'Types') }} {#- -#}
{{ comps.function_summary_table(
    entity.members.values()
        | select("OverloadSet")
        | selectattr("access", "eq", Access.public)
        | selectattr("kind", "eq", FunctionKind.nonstatic),
    'Member Functions') }} {#- -#}
{{ comps.function_summary_table(
    entity.members.values()
        | select("OverloadSet")
        | selectattr("access", "eq", Access.public)
        | selectattr("kind", "eq", FunctionKind.static),
    'Static Member Functions') }} {#- -#}
{{ comps.simple_summary_table(
    entity.members.values()
        | select("Variable")
        | selectattr("access", "eq", Access.public)
        | rejectattr("is_static"),
    'Data Members') }} {#- -#}
{{ comps.simple_summary_table(
    entity.members.values()
        | select("Variable")
        | selectattr("access", "eq", Access.public)
        | selectattr("is_static")
        | reject("in", entity.objects),
    'Static Members') }}  {#- -#}
{{ comps.function_summary_table(
    entity.members.values()
        | select("OverloadSet")
        | selectattr("access", "eq", Access.public)
        | selectattr("kind", "eq", FunctionKind.friend),
    'Friends') }} {#- -#}
{{ comps.function_summary_table(
    entity.members.values()
        | select("OverloadSet")
        | selectattr("access", "eq", Access.public)
        | selectattr("kind", "eq", FunctionKind.free),
    'Related Non-member Functions') }} {#- -#}
{#- protected members -#}
{{ comps.simple_summary_table(
    entity.members.values()
        | select("Type")
        | selectattr("access", "eq", Access.protected),
    'Protected Types') }} {#- -#}
{{ comps.function_summary_table(
    entity.members.values()
        | select("OverloadSet")
        | selectattr("access", "eq", Access.protected)
        | selectattr("kind", "eq", FunctionKind.nonstatic),
    'Protected Member Functions') }} {#- -#}
{{ comps.function_summary_table(
    entity.members.values()
        | select("OverloadSet")
        | selectattr("access", "eq", Access.protected)
        | selectattr("kind", "eq", FunctionKind.static),
    'Protected Static Member Functions') }} {#- -#}
{{ comps.simple_summary_table(
    entity.members.values()
        | select("Variable")
        | selectattr("access", "eq", Access.protected)
        | rejectattr("is_static"),
    'Protected Data Members') }}  {#- -#}
{{ comps.simple_summary_table(
    entity.members.values()
        | select("Variable")
        | selectattr("access", "eq", Access.protected)
        | selectattr("is_static")
        | reject("in", entity.objects),
    'Protected Static Members') }} {#- -#}
{%- endif -%}

{% if entity is Enum -%}
{%- call(member) comps.summary_table(entity.objects, "Values") -%}
    [[^{{ comps.escape(member.name) }}]
    ]
    [{{ comps.description(member.brief) | trim }}
    ]
{%- endcall -%}
{%- else -%}
{{ comps.simple_summary_table(entity.objects, 'Values') }}
{%- endif -%}
{%- endif -%}

{%- if segment == "members" -%}
{%- if entity is Scope -%}
{#- public member subsections -#}
{% for member in entity.members.values()
    | select("Type")
    | selectattr("access", "eq", Access.public) -%}
{{ write_entity(member) }}
{% endfor %}
{%- for member in entity.members.values()
    | select("OverloadSet")
    | selectattr("access", "eq", Access.public)
    | selectattr("kind", "eq", FunctionKind.nonstatic) -%}
{{ write_entity(member) }}
{% endfor %}
{%- for member in entity.members.values()
    | select("OverloadSet")
    | selectattr("access", "eq", Access.public)
    | selectattr("kind", "eq", FunctionKind.static) -%}
{{ write_entity(member) }}
{% endfor %}
{%- for member in entity.members.values()
    | select("Variable")
    | selectattr("access", "eq", Access.public)
    | rejectattr("is_static") -%}
{{ write_entity(member) }}
{% endfor %}
{%- for member in entity.members.values()
    | select("Variable")
    | selectattr("access", "eq", Access.public)
    | selectattr("is_static")
    | reject("in", entity.objects) -%}
{{ write_entity(member) }}
{% endfor %}
{%- for member in entity.members.values()
    | select("OverloadSet")
    | selectattr("access", "eq", Access.public)
    | selectattr("kind", "eq", FunctionKind.friend) -%}
{{ write_entity(member) }}
{% endfor %}
{%- for member in entity.members.values()
    | select("OverloadSet")
    | selectattr("access", "eq", Access.public)
    | selectattr("kind", "eq", FunctionKind.free) -%}
{{ write_entity(member) }}
{% endfor %}
{#- protected member subsections -#}
{%- for member in entity.members.values()
    | select("Type")
    | selectattr("access", "eq", Access.protected) -%}
{{ write_entity(member) }}
{% endfor %}
{%- for member in entity.members.values()
    | select("OverloadSet")
    | selectattr("access", "eq", Access.protected)
    | selectattr("kind", "eq", FunctionKind.nonstatic) -%}
{{ write_entity(member) }}
{% endfor %}
{%- for member in entity.members.values()
    | select("OverloadSet")
    | selectattr("access", "eq", Access.protected)
    | selectattr("kind", "eq", FunctionKind.static) -%}
{{ write_entity(member) }}
{% endfor %}
{%- for member in entity.members.values()
    | select("Variable")
    | selectattr("access", "eq", Access.protected)
    | rejectattr("is_static") -%}
{{ write_entity(member) }}
{% endfor %}
{%- for member in entity.members.values()
    | select("Variable")
    | selectattr("access", "eq", Access.protected)
    | selectattr("is_static")
    | reject("in", entity.objects) -%}
{{ write_entity(member) }}
{% endfor %}
{%- endif -%}

{% if entity is not Enum -%}
{%- for object in entity.objects -%}
{{ write_entity(object) }}
{% endfor %}
{%- endif -%}
{%- endif -%}

{% endcall %}
{% endmacro %}

{% macro write_entity(entity) -%}
    {% if entity.access != Access.private or Config.include_private -%}
        {%- if entity is Namespace -%}
            {{ write_namespace(entity) }}
        {%- elif entity is Type -%}
            {{ write_type(entity) }}
        {%- elif entity is OverloadSet -%}
            {{ write_overload_set(entity) }}
        {%- elif entity is Variable -%}
            {{ comps.write_variable(entity) }}
        {%- elif entity is Function -%}
            {{ comps.write_function(entity) }}
        {%- endif -%}
    {%- endif -%}
{%- endmacro %}

{% macro write_overload_set(oset) -%}
{%- if (oset | length) == 1 -%}
{%- else %}
{%- endif -%}

[section:{{ comps.anchor(oset) }} {{ comps.abridged_fqn(oset) }}]
{% if oset.scope is Namespace -%}
    [indexterm1 {{ comps.escape(oset.name) }}]
{% else -%}
    [indexterm2 {{ comps.escape(oset.name) }}..{{ comps.escape(oset.scope.name) }}]
{% endif %}

{{ comps.description(oset[0].brief) }}

{% if oset.location
    and (oset.scope is Namespace or oset.is_friend) -%}
    Defined in header {{ comps.source_header(oset.location.file) }}
{%- endif %}

{{ comps.heading('Synopsis') }}
```
{% for func in oset -%}
{{ comps.function_declaration(func) }}
{%- if not (loop.first and loop.last) %} // ({{ loop.index }}) {% endif %}

{% endfor -%}
```

{% if oset[0].description -%}
{% if oset[0].description[0] is not Section -%}
    {{ comps.heading('Description') }}
{%- endif %}
{{ oset_description(oset) }}
{%- endif %}

{% if Config.get('convenience_header')
    and oset.location
    and (oset.scope is Namespace
        or (oset.kind in (FunctionKind.free, FunctionKind.friend))) -%}
Convenience header {{ comps.source_header(Config.convenience_header) }}
{%- endif %}

[endsect]
{% endmacro %}

{% macro oset_description(oset, nesting='') -%}
{%- for part in oset[0].description -%}

{%- if part is Paragraph -%}
{{ comps.phrase(part) }}

{% elif part is List -%}
{{ comps.itemised(part, nesting) }}
{%- elif part is Section -%}
{{ comps.subsection(part) }}
{%- elif part is CodeBlock %}
{{ nesting }}```
{% for line in part -%}
{{nesting}}{{line}}
{% endfor -%}
{{ nesting }}```
{% elif part is ParameterList -%}
{{ oset_parameter_list(oset, part.kind) }}
{% elif part is Table -%}
{{ comps.table(part) }}
{%- else -%}
{{ part.unhandled_type() }}
{%- endif -%}
{%- endfor -%}
{%- endmacro %}

{% macro oset_parameter_list(oset, kind) -%}
{%- set ns = namespace(title="", col="") -%}
{%- if kind == ParameterList.Parameters -%}
    {%- set ns.title = "Parameters" -%}
    {%- set ns.col1 = "Name" -%}
    {%- set ns.col2 = "Description" -%}
{%- elif kind == ParameterList.TemplateParameters -%}
    {%- set ns.title = "Template Parameters" -%}
    {%- set ns.col1 = "Type" -%}
    {%- set ns.col2 = "Description" -%}
{%- elif kind == ParameterList.Exceptions -%}
    {%- set ns.title = "Exceptions" -%}
    {%- set ns.col1 = "Type" -%}
    {%- set ns.col2 = "Thrown On" -%}
{%- elif kind == ParameterList.ReturnValues -%}
    {%- set ns.title = "Return Values" -%}
    {%- set ns.col1 = "Type" -%}
    {%- set ns.col2 = "Description" -%}
{%- endif -%}

{%- set params = [] -%}
{%- for func in oset -%}
    {%- for part in func.description -%}
        {%- if part is ParameterList and part.kind == kind -%}
            {%- for param in part -%}
                {%- set name = param | map(attribute="name")
                    | map(attribute="text") | join -%}
                {%- set type = param | map(attribute="type")
                    | map(attribute="text") | join -%}
                {%- set names = params | map("map", attribute="name")
                    | map("map", attribute="text") | map("join") -%}
                {%- set types = params | map("map", attribute="type")
                    | map("map", attribute="text") | map("join") -%}
                {%- if (name not in names) or (type not in types) -%}
                    {%- set ___ = params.append(param) -%}
                {%- endif -%}
            {%- endfor -%}
        {%- endif -%}
    {%- endfor -%}
{%- endfor -%}

{% call(param_block) comps.summary_table(params, ns.title, cols=[ns.col1, ns.col2]) -%}
{%- set sep = joiner(", ") %}[
{%- for item in param_block -%}
{{ sep() }}`
{%- if item.type %}{{ comps.phrase(item.type) }} {% endif -%}
{{ comps.phrase(item.name) }}`
{%- endfor %}
    ]
    [
{{ comps.description(param_block.description) }}
    ]
{%- endcall -%}

{%- endmacro %}

{% for entity in entities.values() -%}
    {% if entity is not Namespace -%}
        {% continue %}
    {%- endif -%}
    {% if Config.default_namespace
        and entity.fully_qualified_name != Config.default_namespace -%}
        {% continue %}
    {%- endif -%}

    {{ write_namespace(entity) }}
{%- endfor %}
