[/
    Copyright (c) 2019 Vinnie Falco (vinnie.falco@gmail.com)

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

    Official repository: https://github.com/cppalliance/json
]

[/-----------------------------------------------------------------------------]

[section Parsing]

Parsing is the process where a serialized JSON is validated
and decomposed into elements. The library provides these
functions and types to assist with parsing:

[table Parsing Functions and Types
[ [Name] [Description ]]
[
    [__parse__]
    [
        Parse a string containing a complete serialized JSON, and
        return a __value__.
    ]
][
    [__parser__]
    [
        A stateful DOM parser object which may be used to
        efficiently parse a series of JSONs incrementally,
        returning each result as a __value__.
    ]
][
    [__basic_parser__]
    [
        The SAX parser base class which may be derived from in order
        to implement custom strategies for representing the parsed
        JSON.
    ]
][
    [__parse_options__]
    [
        A structure used to select which extensions are
        enabled during parsing.
    ]
]]

The `parse` function provides a succinct interface for
converting a JSON to a __value__ in a single function call
that uses exceptions to indicate errors:

[snippet_parsing_1]

An overload is provided to receive an error code upon
failure instead of an exception:

[snippet_parsing_2]

The calls above will produce values that use the default
memory resource. Each parse function allows an additional parameter
specifying the memory resource to use. Here we reset the parser with
a new instance of __monotonic_resource__ for the resulting value:

[snippet_parsing_3]

These free functions use a temporary __parser__ instance, which
allocates internal structures to assist with performance. If a
program needs to parse multiple JSONs sequentially, performance
can be improved by declaring the parser instance explicitly and
using the parser's buffer-oriented interface. This stateful
interface uses the functions
[link json.ref.boost__json__parser.write_some `write_some`] and
[link json.ref.boost__json__parser.write `write`]
to supply zero or more sequential character buffers
representing the JSON, while the function
[link json.ref.boost__json__parser.finish `finish`]
is used to inform the parser that an optional final character
buffer represents the end of the JSON. This example parses
a complete JSON using the stateful API:

[snippet_parsing_4]

Explicit parser instances may also be used to process serialized JSON
incrementally. In the code that follows the JSON is represented by
two consecutive buffers, and the overloads which return the error
code are used instead:

[snippet_parsing_5]

[h4 Allocators]

When
[link json.ref.boost__json__parser.reset `reset`]
is called with no arguments, the parser constructs the resulting
__value__ using the default memory resource. A __storage_ptr__
can also be passed to the function, and the resulting __value__ will
use the specified resource. This example uses a noncounted
`monotonic_resource` as the allocator:

[snippet_parsing_6]

The allocation of the intermediate storage used by __parser__
can also be controlled. When constructing a __parser__,
a __storage_ptr__ can be passed to the constructor and
the managed resource will be used to allocate any intermediate
storage needed during parsing. If this argument is not provided, 
the default memory resource will be used instead. 
The parser will retain its intermediate storage for
the duration of its lifetime, reusing it
to parse subsequent documents:

[snippet_parsing_7]

[h4 SAX]

Users who wish to implement custom parsing strategies may declare
their own type derived from __basic_parser__, and implement the
required virtual functions representing the SAX event interface.
In this example we define the "null" parser, which does nothing
with the parsed results, to use in writing a function that
validates a string to determine if it is valid JSON:

[example_validate]

[h4 Extensions]

The library provides support for the following JSON syntax
extensions:

[table Supported Extensions
[ [Extension] [Description] [Example] ]
[
    [Comments]
    [
        Permits C and C++ style comments to appear
        within whitespace.
    ]
    [
        The following is considered valid:
        ```
        { 
          "primes": [2, 3, 5, 7, 11],
          "fibonacci": [0 /* maybe remove 0 */, 1, 1, 2, 3]
          // TODO: add more
        }
        ```
    ]
][
    [Trailing Commas]
    [
        Allows a comma to appear after the last element
        of an object or array.
    ]
    [
        The following is considered valid:
        ```
        [
          {"key": "value",},
          2,
          3,
        ]
        ```
    ]
][
    [Skip UTF-8 Validation]
    [
        UTF-8 byte sequences appearing within strings
        are not checked for validity 
        [br]
        (as defined by 
        [@https://www.unicode.org/versions/Unicode13.0.0/UnicodeStandard-13.0.pdf The Unicode Standard Version 13.0 Section 3.9]).
    ]
    [
        A string containing the invalid UTF-8 byte sequence `0xC0 0x9F` is considered valid.
    ]
]]

[note
    Disabling UTF-8 validation can yield a sizeable
    increase in performance when parsing JSON containing
    UTF-8 byte sequences that are guaranteed to be valid.
    Documents that only contain ASCII characters also benefit,
    but the performance increase is less significant.
]

Without configuration, __basic_parser__ and __parser__
will only parse JSON deemed well-formed by the 
[@https://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf JSON Data Interchange Syntax]
specification: 

[snippet_parsing_8]

Extensions can be enabled by passing __parse_options__
to __parser__ upon construction. Users implementing custom
parsers derived from __basic_parser__ can pass __parse_options__
to the base class's constructor:

[snippet_parsing_9]

[endsect]
