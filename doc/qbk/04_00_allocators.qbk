[/
    Copyright (c) 2019 Vinnie Falco (vinnie.falco@gmail.com)
    Copyright (c) 2020 Krystian Stasiowski (sdkrystian@gmail.com)

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

    Official repository: https://github.com/cppalliance/json
]

[/-----------------------------------------------------------------------------]

[section Allocators]

Here we discuss the various allocator models used in the
C++ standard, followed by an explanation of the model used in
this library and its benefits. Finally we discuss how the library
interoperates with existing code that uses polymorphic allocators.

[note
    In the sections which follow, the aliases
    __memory_resource__ and __polymorphic_allocator__
    refer to either Boost types, or `std` types when
    `BOOST_JSON_STANDALONE` is defined.
]

[/-----------------------------------------------------------------------------]

[section Background]

The first version of allocators in C++ defined the named requirement
__Allocator__, and made each standard container a class template
parameterized on the allocator type. For example, here is the
declaration for __std_vector__:

[doc_background_1]

The standard allocator is __DefaultConstructible__. To support stateful
allocators, containers provide additional constructor overloads taking
an allocator instance parameter.

[doc_background_2]

While the system works, it has some usability problems:

* The container must be a class template.
* Parameterizing the allocator on the element type is clumsy.
* The system of allocator traits, especially POCCA and POCMA,
  is complicated and error-prone.

Allocator-based programs which use multiple allocator types
incur a greater number of function template instantiations and
are generally slower to compile because class template function
definitions must be visible at all call sites.

[heading Polymorphic Allocators]

C++17 improves the allocator model by representing the low-level
allocation operation with an abstract interface called __memory_resource__,
which is not parameterized on the element type, and has no traits:

[doc_background_3]

The class template __polymorphic_allocator__ wraps a __memory_resource__
pointer and meets the requirements of __Allocator__, allowing it to be
used where an allocator is expected. The standard provides type aliases
using the polymorphic allocator for standard containers:

[doc_background_4]

A polymorphic allocator constructs with a pointer to a memory resource:

[doc_background_5]

The memory resource is passed by pointer; ownership is not transferred.
The caller is responsible for extending the lifetime of the memory
resource until the last container which is using it goes out of scope,
otherwise the behavior is undefined. Sometimes this is the correct model,
such as in this example which uses a monotonic resource constructed from
a local stack buffer:

[doc_background_6]

However, sometimes shared ownership is needed. Specifically, that the
lifetime extension of the memory resource should be automatic. For
example, if a library wants to return a container which owns an
instance of the library's custom memory resource as shown below:

[doc_background_7]

This can be worked around by declaring the container to use a custom
allocator (perhaps using a `std::shared_ptr< memory_resource >` as a
data member). This hinders library composition; every library now
exports unique, incompatible container types. A raw memory resource
pointer is also easy to misuse:

[doc_background_8]

Workarounds for this problem are worse than the problem itself. The library
could return a pair with the vector and `unique_ptr<memory_resource>`
which the caller must manage. Or the library could change its function
signatures to accept a `memory_resource*` provided by the caller, where
the library also makes public the desired memory resources
(`my_resource` above).

[heading Problem Statement]

We would like an allocator model using a single type `T` with the
following properties:

* `T` is not a class template
* `T` references a __memory_resource__
* `T` supports both reference semantics or shared ownership
* `T` interoperates with code already using `std::pmr`

Boost.JSON solves this problem by introducing a new smart pointer
called __storage_ptr__ which builds upon C++17's memory allocation
interfaces, accomplishing the goals above. As a result, libraries
which use this type compose more easily and enjoy faster compilation,
as member functions for containers which use the type can be defined
out-of-line.

[endsect]

[/-----------------------------------------------------------------------------]

[section:storage_ptr __storage_ptr__]

Variable-length containers in this library all use dynamically allocated
memory to store their contents. Callers can gain control over the strategy
used for allocation by specifying a __storage_ptr__ in select constructors
and function parameter lists. A __storage_ptr__ has these properties:

* A storage pointer always points to a valid,
  type-erased __memory_resource__.

* Default-constructed storage pointers reference the
  ['default resource], an implementation-defined instance
  which always uses the equivalent of global operator new
  and delete.

* Storage pointers constructed from a
  [link json.ref.boost__json__memory_resource `memory_resource*`]
  or __polymorphic_allocator__ do not acquire ownership; the
  caller is responsible for ensuring that the lifetime of
  the resource extends until it is no longer referenced.

* A storage pointer obtained from __make_counted_resource__
  acquires shared ownership of the memory resource; the
  lifetime of the resource is extended until all copies
  of the storage pointer are destroyed.

* The storage pointer remembers the value of
  __is_deallocate_trivial__ before type-erasing the resource,
  allowing the value to be queried at run-time.

This lists all of the allocation-related types and functions
available when using the library:

[table Functions and Types
[ [Name] [Description] ]
[
    [__get_null_resource__]
    [
        Returns a pointer to a memory resource instance which
        always throws an exception upon allocation. This is
        used to to achieve the invariant that no parsing or
        container operation will dynamically allocate memory.
    ]
][
    [__is_deallocate_trivial__]
    [
        A customization point allowing a memory resource type
        to indicate that calls to deallocate are trivial.
    ]
][
    [__make_counted_resource__]
    [
        A function returning a smart pointer with shared
        ownership of a newly allocated memory resource.
    ]
][
    [__memory_resource__]
    [
        The abstract base class representing an allocator.
    ]
][
    [__monotonic_resource__]
    [
        A memory resource which allocates large blocks of memory and
        has a trivial deallocate function. Allocated memory is not
        freed until the resource is destroyed, making it fast for
        parsing but not suited for performing modifications.
    ]
][
    [__polymorphic_allocator__]
    [
        An __Allocator__ which uses a reference to a
        __memory_resource__ to perform allocations.
    ]
][
    [__static_resource__]
    [
        A memory resource that uses a single caller provided
        buffer. No dynamic allocations are used. This is fast for
        parsing but not suited for performing modifications.
    ]
][
    [__storage_ptr__]
    [
        A smart pointer through which a __memory_resource__
        is managed and accessed.
    ]
]]

[/-----------------------------------------------------------------------------]

[heading Default Memory Resource]

The ['default memory resource] wraps calls to the global heap allocation
functions. This resource is not reference counted and has a non-trivial
deallocate function. All default-constructed __storage_ptr__ reference
the same default memory resource:

[doc_storage_ptr_1]

Default-constructed library containers use the default memory resource:

[doc_storage_ptr_2]

The default memory resource is well suited for general usage. It offers
reasonable performance for parsing, and conservative memory usage for
modification of the contents of containers.

[/-----------------------------------------------------------------------------]

[heading Monotonic Resource]

Consider the pattern of memory allocation during parsing: when an array,
object, or string is encountered the parser accumulates elements in its
temporary storage area. When all of the elements are known, a single
memory allocation is requested from the resource when constructing
the value. Thus, parsing only allocates and creates containers
fully-formed. Memory is not reallocated; that is, a memory buffer never
needs to grow by allocating a new larger buffer and deallocating the
previous buffer.

The __monotonic_resource__ optimizes this memory allocation pattern by
allocating increasingly large blocks of global memory internally and
parcelling those blocks out in smaller pieces to fulfill allocation
requests. It has a trivial deallocate function. The monotonic resource
does not actually deallocate memory until the resource is destroyed.
Thus, it is ideally suited for the use-case where JSON is parsed,
and the resulting value is then inspected but not modified.

The resource to use when constructing values may be specified in calls
to __parse__ as shown here:

[doc_storage_ptr_3]

Or, to parse into a value with shared ownership of the memory resource:

[doc_storage_ptr_4]

A monotonic resource may be optionally constructed with an initial buffer
to use first, before going to the heap. This allows the caller to use
stack space and avoid dynamic allocations for most parsed JSON, falling
back to dynamic allocation from the heap if the input JSON is larger than
average, as shown here:

[doc_storage_ptr_5]

[/-----------------------------------------------------------------------------]

[heading Static Resource]

A __static_resource__ constructs from a caller-provided buffer, and satisfies
all memory allocation requests from the buffer. Once the buffer is exhausted,
subsequent calls to allocate throw the exception `std::bad_alloc`. The
resource offers a simple invariant: dynamic heap allocations are never
performed.

To use the resource, construct it with a local buffer:

[doc_storage_ptr_6]

[/-----------------------------------------------------------------------------]

[heading Null Resource]

The function __get_null_resource__ returns a global instance of the
null resource. This resource offers a simple invariant: all calls to
allocate will throw the exception `std::bad_alloc`. An instance of
the null resource can be used to make parsing guarantee that
allocations from the heap are never made. This is explored
in more detail in a later section.

[/-----------------------------------------------------------------------------]

[heading Allocator Propagation]

The containers __array__, __object__, and __value__ all propagate the
memory resource they were constructed with to child elements:

[doc_storage_ptr_7]

This propagation acts recursively, containers within containers will
all have the resource propagated. Once a container is constructed,
its memory resource can never be changed.

[/-----------------------------------------------------------------------------]

[heading Resource Lifetime]

It is important to note that __storage_ptr__ supports both
shared-ownership and reference lifetime models. Construction
from a memory resource pointer does not transfer ownership:

[doc_storage_ptr_8]

When using a memory resource in this fashion, including the case
where a storage pointer or container is constructed from a
__polymorphic_allocator__, the caller must ensure that the
lifetime of the resource is extended until it is no longer
referenced by any variables; otherwise, undefined behavior
is possible.

Shared ownership is achieved using the function __make_counted_resource__,
which creates a new, reference-counted memory resource using a dynamic memory
allocation and returns it as a __storage_ptr__:

[doc_storage_ptr_9]

When a storage pointer is constructed this way, the lifetime of
the referenced memory resource is extended until all variables which
reference it are destroyed.

[heading User-Defined Resource]

To implement custom memory allocation strategies, derive your class
from __memory_resource__ and implement the functions `do_allocate`,
`do_deallocate`, and `do_is_equal` as seen in this example below,
which logs each operation it performs to the console:

[doc_storage_ptr_10]

[endsect]

[/-----------------------------------------------------------------------------]

[section:uses_allocator Uses-allocator construction]

To support code bases which are already using polymorphic allocators,
the containers in this library support __std_uses_allocator__ construction.
For __array__, __object__, __string__, and __value__:

* The nested type `allocator_type` is an alias for a __polymorphic_allocator__

* All eligible constructors which accept __storage_ptr__ will also accept
    an instance of __polymorphic_allocator__ in the same argument position.

* The member function `get_allocator` returns an instance of
    __polymorphic_allocator__ constructed from the __memory_resource__
    used by the container. Ownership of this memory resource is not
    transferred.

Practically, this means that when a library container type is used in a
standard container that uses a polymorphic allocator, the allocator will
propagate to the JSON type. For example:

[doc_uses_allocator_1]

Library containers can be constructed from polymorphic allocators:

[doc_uses_allocator_2]

The polymorphic allocator is propagated recursively.
Child elements of child elements will use the same memory
resource as the parent.

[endsect]

[/-----------------------------------------------------------------------------]

[endsect]
